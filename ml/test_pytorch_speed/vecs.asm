; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	parse
PUBLIC	xmalloc
PUBLIC	frand
PUBLIC	rand_vec
PUBLIC	mul
PUBLIC	main
PUBLIC	??_C@_06GLDDLHNF@malloc@			; `string'
PUBLIC	??_C@_0BM@NFDCBMD@Usage?3?5vecs?5?$DMsize?$DO?5?$DMtimes?$DO?6@ ; `string'
PUBLIC	??_C@_03PPOCCAPH@?$CFf?6@			; `string'
PUBLIC	__real@3f00000000000000
EXTRN	_errno:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	perror:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	malloc:PROC
EXTRN	exit:PROC
EXTRN	rand:PROC
EXTRN	strtoull:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse DD	imagerel $LN7
	DD	imagerel $LN7+84
	DD	imagerel $unwind$parse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xmalloc DD imagerel $LN7
	DD	imagerel $LN7+42
	DD	imagerel $unwind$xmalloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$frand DD	imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$frand
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rand_vec DD imagerel $LN14
	DD	imagerel $LN14+41
	DD	imagerel $unwind$rand_vec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$rand_vec DD imagerel $LN14+41
	DD	imagerel $LN14+98
	DD	imagerel $chain$0$rand_vec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$rand_vec DD imagerel $LN14+98
	DD	imagerel $LN14+114
	DD	imagerel $chain$1$rand_vec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN25
	DD	imagerel $LN25+50
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$main DD imagerel $LN25+50
	DD	imagerel $LN25+266
	DD	imagerel $chain$3$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$main DD imagerel $LN25+266
	DD	imagerel $LN25+304
	DD	imagerel $chain$5$main
pdata	ENDS
;	COMDAT __real@3f00000000000000
CONST	SEGMENT
__real@3f00000000000000 DQ 03f00000000000000r	; 3.05176e-05
CONST	ENDS
;	COMDAT ??_C@_03PPOCCAPH@?$CFf?6@
CONST	SEGMENT
??_C@_03PPOCCAPH@?$CFf?6@ DB '%f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NFDCBMD@Usage?3?5vecs?5?$DMsize?$DO?5?$DMtimes?$DO?6@
CONST	SEGMENT
??_C@_0BM@NFDCBMD@Usage?3?5vecs?5?$DMsize?$DO?5?$DMtimes?$DO?6@ DB 'Usage'
	DB	': vecs <size> <times>', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLDDLHNF@malloc@
CONST	SEGMENT
??_C@_06GLDDLHNF@malloc@ DB 'malloc', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$main DD 060021H
	DD	0a7400H
	DD	095400H
	DD	083400H
	DD	imagerel $LN25
	DD	imagerel $LN25+50
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$main DD 086c21H
	DD	02686cH
	DD	0a7413H
	DD	09540eH
	DD	083405H
	DD	imagerel $LN25
	DD	imagerel $LN25+50
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	020601H
	DD	060025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$rand_vec DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+41
	DD	imagerel $unwind$rand_vec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$rand_vec DD 020621H
	DD	026806H
	DD	imagerel $LN14
	DD	imagerel $LN14+41
	DD	imagerel $unwind$rand_vec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rand_vec DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frand DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xmalloc DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
argc$ = 64
argv$ = 72
main	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 78
$LN25:
	push	rsi
	sub	rsp, 48					; 00000030H
	mov	rsi, rdx
; Line 79
	cmp	ecx, 3
	jge	SHORT $LN4@main
; Line 80
	mov	ecx, 2
	call	__acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_0BM@NFDCBMD@Usage?3?5vecs?5?$DMsize?$DO?5?$DMtimes?$DO?6@
	call	fprintf
; Line 81
	mov	eax, 1
; Line 94
	add	rsp, 48					; 00000030H
	pop	rsi
	ret	0
$LN4@main:
	mov	QWORD PTR [rsp+64], rbx
; Line 83
	mov	rbx, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+72], rbp
	mov	QWORD PTR [rsp+80], rdi
; Line 44
	call	_errno
	xor	ebp, ebp
; Line 45
	xor	edx, edx
	mov	rcx, rbx
	mov	DWORD PTR [rax], ebp
	lea	r8d, QWORD PTR [rbp+10]
	call	strtoull
	mov	rdi, rax
; Line 46
	call	_errno
	cmp	DWORD PTR [rax], ebp
	jne	$LN23@main
; Line 84
	mov	rsi, QWORD PTR [rsi+16]
; Line 44
	call	_errno
; Line 45
	xor	edx, edx
	lea	r8d, QWORD PTR [rbp+10]
	mov	rcx, rsi
	mov	DWORD PTR [rax], ebp
	call	strtoull
	mov	rbx, rax
; Line 46
	call	_errno
	cmp	DWORD PTR [rax], ebp
	jne	$LN24@main
; Line 85
	mov	rcx, rdi
	vmovaps	XMMWORD PTR [rsp+32], xmm6
	call	rand_vec
; Line 86
	mov	rcx, rdi
	mov	rsi, rax
	call	rand_vec
	mov	rbp, rax
	vxorps	xmm6, xmm6, xmm6
; Line 89
	test	rbx, rbx
	je	SHORT $LN14@main
	npad	6
$LL2@main:
; Line 90
	mov	r8, rdi
	mov	rdx, rbp
	mov	rcx, rsi
	call	mul
	vaddss	xmm6, xmm6, xmm0
	sub	rbx, 1
	jne	SHORT $LL2@main
$LN14@main:
; Line 92
	vcvtss2sd xmm1, xmm6, xmm6
	vmovq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_03PPOCCAPH@?$CFf?6@
	call	printf
; Line 93
	vmovaps	xmm6, XMMWORD PTR [rsp+32]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+80]
; Line 94
	add	rsp, 48					; 00000030H
	pop	rsi
	ret	0
$LN23@main:
; Line 47
	mov	rcx, rbx
	call	perror
; Line 48
	mov	ecx, 1
	call	exit
	int	3
$LN24@main:
; Line 47
	mov	rcx, rsi
	call	perror
; Line 48
	mov	ecx, 1
	call	exit
	int	3
$LN21@main:
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mul
_TEXT	SEGMENT
a$ = 8
b$ = 16
n$ = 24
mul	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 72
	xor	r9d, r9d
; Line 73
	sub	rcx, rdx
	mov	r10, rdx
	vxorps	xmm3, xmm3, xmm3
	cmp	r8, 4
	jb	SHORT $LC12@mul
; Line 72
	lea	rax, QWORD PTR [rdx+4]
	lea	rdx, QWORD PTR [r8-4]
	shr	rdx, 2
	inc	rdx
	lea	r9, QWORD PTR [rdx*4]
	npad	6
; Line 73
$LL13@mul:
; Line 74
	vmovss	xmm0, DWORD PTR [rcx+rax-4]
	vmulss	xmm1, xmm0, DWORD PTR [rax-4]
	vmovss	xmm2, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm2, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+16]
	vaddss	xmm3, xmm1, xmm3
	vmovss	xmm1, DWORD PTR [rcx+rax-12]
	vmulss	xmm2, xmm1, DWORD PTR [rax-12]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rcx+rax-8]
	vmulss	xmm1, xmm0, DWORD PTR [rax-8]
	vaddss	xmm3, xmm4, xmm2
	vaddss	xmm3, xmm3, xmm1
	sub	rdx, 1
	jne	SHORT $LL13@mul
$LC12@mul:
; Line 73
	cmp	r9, r8
	jae	SHORT $LN17@mul
	lea	rax, QWORD PTR [r10+r9*4]
	sub	r8, r9
$LC8@mul:
; Line 74
	vmovss	xmm1, DWORD PTR [rcx+rax]
	vmulss	xmm2, xmm1, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+4]
	vaddss	xmm3, xmm3, xmm2
	sub	r8, 1
	jne	SHORT $LC8@mul
$LN17@mul:
; Line 76
	vmovaps	xmm0, xmm3
	ret	0
mul	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT rand_vec
_TEXT	SEGMENT
n$ = 64
rand_vec PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 64
$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rsi, rcx
; Line 65
	lea	rcx, QWORD PTR [rcx*4]
	call	malloc
	xor	ebx, ebx
	mov	rdi, rax
; Line 66
	test	rsi, rsi
	je	SHORT $LN3@rand_vec
	vmovaps	XMMWORD PTR [rsp+32], xmm6
	vmovsd	xmm6, QWORD PTR __real@3f00000000000000
$LL4@rand_vec:
; Line 62
	call	rand
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, eax
	vmulsd	xmm1, xmm0, xmm6
	vcvtsd2ss xmm2, xmm1, xmm1
; Line 67
	vmovss	DWORD PTR [rdi+rbx*4], xmm2
	inc	rbx
	cmp	rbx, rsi
	jb	SHORT $LL4@rand_vec
; Line 68
	vmovaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rax, rdi
$LN3@rand_vec:
; Line 69
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
rand_vec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT frand
_TEXT	SEGMENT
frand	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 62
$LN4:
	sub	rsp, 40					; 00000028H
	call	rand
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, eax
	vmulsd	xmm1, xmm0, QWORD PTR __real@3f00000000000000
	vcvtsd2ss xmm0, xmm1, xmm1
	add	rsp, 40					; 00000028H
	ret	0
frand	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT xmalloc
_TEXT	SEGMENT
bytes$ = 48
xmalloc	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 53
$LN7:
	sub	rsp, 40					; 00000028H
; Line 54
	call	malloc
; Line 55
	test	rax, rax
	je	SHORT $LN6@xmalloc
; Line 60
	add	rsp, 40					; 00000028H
	ret	0
$LN6@xmalloc:
; Line 56
	lea	rcx, OFFSET FLAT:??_C@_06GLDDLHNF@malloc@
	call	perror
; Line 57
	mov	ecx, 1
	call	exit
	int	3
$LN4@xmalloc:
xmalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT parse
_TEXT	SEGMENT
s$ = 48
parse	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs.c
; Line 43
$LN7:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 44
	call	_errno
; Line 45
	xor	edx, edx
	mov	rcx, rbx
	mov	DWORD PTR [rax], 0
	lea	r8d, QWORD PTR [rdx+10]
	call	strtoull
	mov	rdi, rax
; Line 46
	call	_errno
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN6@parse
; Line 51
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@parse:
; Line 47
	mov	rcx, rbx
	call	perror
; Line 48
	mov	ecx, 1
	call	exit
	int	3
$LN4@parse:
parse	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fprintf
_TEXT	SEGMENT
_Stream$ = 80
_Format$ = 88
fprintf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 837
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
; Line 840
	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rbx, rcx
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 844
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
