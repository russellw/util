; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	xmalloc
PUBLIC	mk_vec
PUBLIC	mul
PUBLIC	main
PUBLIC	??_C@_06GLDDLHNF@malloc@			; `string'
PUBLIC	??_C@_03PPOCCAPH@?$CFf?6@			; `string'
PUBLIC	__ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
EXTRN	__acrt_iob_func:PROC
EXTRN	perror:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	malloc:PROC
EXTRN	exit:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xmalloc DD imagerel $LN7
	DD	imagerel $LN7+42
	DD	imagerel $unwind$xmalloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mk_vec DD imagerel $LN11
	DD	imagerel $LN11+39
	DD	imagerel $unwind$mk_vec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN55
	DD	imagerel $LN55+351
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
CONST	SEGMENT
__ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000 DB 00H
	DB	00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H
	DB	080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT ??_C@_03PPOCCAPH@?$CFf?6@
CONST	SEGMENT
??_C@_03PPOCCAPH@?$CFf?6@ DB '%f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLDDLHNF@malloc@
CONST	SEGMENT
??_C@_06GLDDLHNF@malloc@ DB 'malloc', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mk_vec DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xmalloc DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
main	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs_fixed.c
; Line 40
$LN55:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 27
	mov	ecx, 64					; 00000040H
; Line 41
	mov	edi, 100000000				; 05f5e100H
; Line 27
	call	malloc
; Line 41
	vmovdqu	ymm0, YMMWORD PTR __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
; Line 27
	mov	rbx, rax
	mov	ecx, 64					; 00000040H
; Line 41
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
; Line 27
	vzeroupper
	call	malloc
; Line 42
	vmovdqu	ymm0, YMMWORD PTR __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
	vxorps	xmm5, xmm5, xmm5
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
	vmovss	xmm1, DWORD PTR [rbx]
	vmulss	xmm2, xmm1, DWORD PTR [rax]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm3, xmm0, DWORD PTR [rbx+4]
	vmovss	xmm1, DWORD PTR [rax+8]
	vaddss	xmm0, xmm2, xmm5
	vmulss	xmm2, xmm1, DWORD PTR [rbx+8]
	vaddss	xmm3, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rax+12]
	vmulss	xmm1, xmm0, DWORD PTR [rbx+12]
	vaddss	xmm4, xmm3, xmm2
	vmovss	xmm2, DWORD PTR [rax+16]
	vmulss	xmm0, xmm2, DWORD PTR [rbx+16]
	vaddss	xmm3, xmm4, xmm1
	vmovss	xmm1, DWORD PTR [rax+20]
	vmulss	xmm2, xmm1, DWORD PTR [rbx+20]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rax+24]
	vmulss	xmm1, xmm0, DWORD PTR [rbx+24]
	vaddss	xmm3, xmm4, xmm2
	vmovss	xmm2, DWORD PTR [rax+28]
	vmulss	xmm0, xmm2, DWORD PTR [rbx+28]
	vaddss	xmm4, xmm3, xmm1
	vmovss	xmm1, DWORD PTR [rax+32]
	vmulss	xmm2, xmm1, DWORD PTR [rbx+32]
	vaddss	xmm3, xmm4, xmm0
	vmovss	xmm0, DWORD PTR [rax+36]
	vmulss	xmm1, xmm0, DWORD PTR [rbx+36]
	vaddss	xmm4, xmm3, xmm2
	vmovss	xmm2, DWORD PTR [rax+40]
	vmulss	xmm0, xmm2, DWORD PTR [rbx+40]
	vaddss	xmm3, xmm4, xmm1
	vmovss	xmm1, DWORD PTR [rax+44]
	vmulss	xmm2, xmm1, DWORD PTR [rbx+44]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rax+48]
	vmulss	xmm1, xmm0, DWORD PTR [rbx+48]
	vaddss	xmm3, xmm4, xmm2
	vmovss	xmm2, DWORD PTR [rax+52]
	vmulss	xmm0, xmm2, DWORD PTR [rbx+52]
	vaddss	xmm4, xmm3, xmm1
	vmovss	xmm1, DWORD PTR [rax+56]
	vmulss	xmm2, xmm1, DWORD PTR [rbx+56]
	vaddss	xmm3, xmm4, xmm0
	vmovss	xmm0, DWORD PTR [rax+60]
	vmulss	xmm1, xmm0, DWORD PTR [rbx+60]
	vaddss	xmm4, xmm3, xmm2
	vaddss	xmm2, xmm4, xmm1
	npad	3
$LL2@main:
; Line 47
	vaddss	xmm5, xmm5, xmm2
	sub	rdi, 1
	jne	SHORT $LL2@main
; Line 49
	vcvtss2sd xmm1, xmm5, xmm5
	vmovq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_03PPOCCAPH@?$CFf?6@
	vzeroupper
	call	printf
; Line 51
	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mul
_TEXT	SEGMENT
a$ = 8
b$ = 16
mul	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs_fixed.c
; Line 36
	vmovss	xmm0, DWORD PTR [rcx+4]
	vmulss	xmm3, xmm0, DWORD PTR [rdx+4]
	vmovss	xmm1, DWORD PTR [rcx]
	vmulss	xmm2, xmm1, DWORD PTR [rdx]
	vmovss	xmm1, DWORD PTR [rcx+8]
	vxorps	xmm0, xmm0, xmm0
	vaddss	xmm2, xmm2, xmm0
	vmulss	xmm0, xmm1, DWORD PTR [rdx+8]
	vaddss	xmm3, xmm3, xmm2
	vmovss	xmm2, DWORD PTR [rcx+12]
	vmulss	xmm1, xmm2, DWORD PTR [rdx+12]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rcx+16]
	vmulss	xmm2, xmm0, DWORD PTR [rdx+16]
	vaddss	xmm3, xmm4, xmm1
	vmovss	xmm1, DWORD PTR [rcx+20]
	vmulss	xmm0, xmm1, DWORD PTR [rdx+20]
	vaddss	xmm4, xmm3, xmm2
	vmovss	xmm2, DWORD PTR [rcx+24]
	vmulss	xmm1, xmm2, DWORD PTR [rdx+24]
	vaddss	xmm3, xmm4, xmm0
	vmovss	xmm0, DWORD PTR [rcx+28]
	vmulss	xmm2, xmm0, DWORD PTR [rdx+28]
	vaddss	xmm4, xmm3, xmm1
	vmovss	xmm1, DWORD PTR [rcx+32]
	vmulss	xmm0, xmm1, DWORD PTR [rdx+32]
	vaddss	xmm3, xmm4, xmm2
	vmovss	xmm2, DWORD PTR [rcx+36]
	vmulss	xmm1, xmm2, DWORD PTR [rdx+36]
	vaddss	xmm4, xmm3, xmm0
	vmovss	xmm0, DWORD PTR [rcx+40]
	vmulss	xmm2, xmm0, DWORD PTR [rdx+40]
	vaddss	xmm3, xmm4, xmm1
	vmovss	xmm1, DWORD PTR [rcx+44]
	vmulss	xmm0, xmm1, DWORD PTR [rdx+44]
	vaddss	xmm4, xmm3, xmm2
	vmovss	xmm2, DWORD PTR [rcx+48]
	vmulss	xmm1, xmm2, DWORD PTR [rdx+48]
	vaddss	xmm3, xmm4, xmm0
	vmovss	xmm0, DWORD PTR [rcx+52]
	vmulss	xmm2, xmm0, DWORD PTR [rdx+52]
	vaddss	xmm4, xmm3, xmm1
	vmovss	xmm1, DWORD PTR [rcx+56]
	vmulss	xmm0, xmm1, DWORD PTR [rdx+56]
	vaddss	xmm3, xmm4, xmm2
	vmovss	xmm2, DWORD PTR [rcx+60]
	vmulss	xmm1, xmm2, DWORD PTR [rdx+60]
	vaddss	xmm4, xmm3, xmm0
	vaddss	xmm0, xmm4, xmm1
; Line 38
	ret	0
mul	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mk_vec
_TEXT	SEGMENT
mk_vec	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs_fixed.c
; Line 26
$LN11:
	sub	rsp, 40					; 00000028H
; Line 27
	mov	ecx, 64					; 00000040H
	call	malloc
	vmovdqu	ymm0, YMMWORD PTR __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
	vzeroupper
; Line 31
	add	rsp, 40					; 00000028H
	ret	0
mk_vec	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT xmalloc
_TEXT	SEGMENT
bytes$ = 48
xmalloc	PROC						; COMDAT
; File C:\ml\test_pytorch_speed\vecs_fixed.c
; Line 17
$LN7:
	sub	rsp, 40					; 00000028H
; Line 18
	call	malloc
; Line 19
	test	rax, rax
	je	SHORT $LN6@xmalloc
; Line 24
	add	rsp, 40					; 00000028H
	ret	0
$LN6@xmalloc:
; Line 20
	lea	rcx, OFFSET FLAT:??_C@_06GLDDLHNF@malloc@
	call	perror
; Line 21
	mov	ecx, 1
	call	exit
	int	3
$LN4@xmalloc:
xmalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
